mushroom-card {     /* To position and align details card */   
  display: flex;   // Set up a flexible container for both mushroom and detail cards. Ensure they remain centered when viewed on screen via Flexbox layout model in CSS3 specification, regardless of their size or dimensions within the parent element (which is why it's set to 'relative'). This ensures all children elements are positioned correctly even if you change one card’s dimension
  flex-direction: column; // Set up a flexible container for both mushroom and detail cards. Ensure they remain centered when viewed on screen via Flexbox layout model in CSS3 specification, regardless of their size or dimensions within the parent element (which is why it's set to 'relative'). This ensures all children elements are positioned correctly even if you change one card’s dimension
  flex-basis: auto; // Set up a flexible container for both mushroom and detail cards. Ensure they remain centered when viewed on screen via Flexbox layout model in CSS3 specification, regardless of their size or dimensions within the parent element (which is why it's set to 'relative'). This ensures all children elements are positioned correctly even if you change one card’s dimension
  flex-grow: auto; // Set up a flexible container for both mushroom and detail cards. Ensure they remain centered when viewed on screen via Flexbox layout model in CSS3 specification, regardless of their size or dimensions within the parent element (which is why it's set to 'relative'). This ensures all children elements are positioned correctly even if you change one card’s dimension
  flex-shrink: auto; // Set up a flexible container for both mushroom and detail cards. Ensure they remain centered when viewed on screen via Flexbox layout model in CSS3 specification, regardless of their size or dimensions within the parent element (which is why it's set to 'relative'). This ensures all children elements are positioned correctly even if you change one card’s dimension
  margin: aumushroom-card {     /* To position and align details card */   
  display: flex;   // Set up a flexible container for both mushroom and detail cards. Ensure they remain centered when viewed on screen via Flexbox layout model in CSS3 specification, regardless of their size or dimensions within the parent element (which is why it's set to 'relative'). This ensures all children elements are positioned correctly even if you change one card’s dimension
  flex-direction: column; // Set up a flexible container for both mushroom and detail cards. Ensure they remain centered when viewed on screen via Flexbox layout model in CSS3 specification, regardless of their size or dimensions within the parent element (which is why it's set to 'relative'). This ensures all children elements are positioned correctly even if you change one card’s dimension
  flex-basis: auto; // Set up a flexible container for both mushroom and detail cards. Ensure they remain centered when viewed on screen via Flexbox layout model in CSS3 specification, regardless of their size or dimensions within the parent element (which is why it's set to 'relative'). This ensures all children elements are positioned correctly even if you change one card’s dimension
  flex-grow: auto; // Set up a flexible container for both mushroom and detail cards. Ensure they remain centered when viewed on screen via Flexbox layout model in CSS3 specification, regardless of their size or dimensions within the parent element (which is why it's set to 'relative'). This ensures all children elements are positioned correctly even if you change one card’s dimension
  flex-shrink: auto; // Set up a flexible container for both mushroom and detail cards. Ensure they remain centered when viewed on screen via Flexbox layout model in CSS3 specification, regardless of their size or dimensions within the parent element (which is why it's set to 'relative'). This ensures all children elements are positioned correctly even if you change one card’s dimension
  margin: auto; // To ensure that cards remain centered on screen when viewed via media query. Set up a flexible container for both mushroom and detail cards, ensuring they maintain the same center point no matter their size or dimensions within its parent element (which is why it's set to 'relative'). This ensures all children elements are positioned correctly even if you change one card’s dimension
  max-width: fit-content; // To ensure that when there isn't enough space for the full width of a screen, cards remain centered on screen no matter which device they use. Set up flexible container to both mushroom and detail cards ensuring each remains centrally located within its parent element (which is why it’s set as 'relative'). This ensures all children elements are positioned correctly even if you change one card's dimension
  transition: none; // To ensure that when there isn't enough space for the full width of a screen, cards remain centered on screen no matter which device they use. Set up flexible container to both mushroom and detail cards ensuring each remains centrally located within its parent element (which is why it’s set as 'relative'). This ensures all children elements are positioned correctly even if you change one card's dimension
}      /* End of setting flex properties */          // Beginning New Container for Detail Section         .details-container{            display: none;             opacity  :0.6 ;               transition:.3 s ease;}     }       /**/        @keyframes animateOpacity {    from{.5}, to{}
}  ```![](https://imgur.com/fLH4l8v)CSS```\](http//exampleurltoyourcssfilegoeshere/.png)![:-:][:-:]  CSS :end[::1]END OF REFACTORING!!!!!
to; // To ensure that cards remain centered on screen when viewed via media query. Set up a flexible container for both mushroom and detail cards, ensuring they maintain the same center point no matter their size or dimensions within its parent element (which is why it's set to 'relative'). This ensures all children elements are positioned correctly even if you change one card’s dimension
  max-width: fit-content; // To ensure that when there isn't enough space for the full width of a screen, cards remain centered on screen no matter which device they use. Set up flexible container to both mushroom and detail cards ensuring each remains centrally located within its parent element (which is why it’s set as 'relative'). This ensures all children elements are positioned correctly even if you change one card's dimension
  transition: none; // To ensure that when there isn't enough space for the full width of a screen, cards remain centered on screen no matter which device they use. Set up flexible container to both mushroom and detail cards ensuring each remains centrally located within its parent element (which is why it’s set as 'relative'). This ensures all children elements are positioned correctly even if you change one card's dimension
}      /* End of setting flex properties */          // Beginning New Container for Detail Section         .details-container{            display: none;             opacity  :0.6 ;               transition:.3 s ease;}     }       /**/        @keyframes animateOpacity {    from{.5}, to{}
}  ```![](https://imgur.com/fLH4l8v)CSS```\](http//exampleurltoyourcssfilegoeshere/.png)![:-:][:-:]  CSS :end[::1]END OF REFACTORING!!!!!
